import 'dart:convert';
import 'dart:math' as math;

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:timeago/timeago.dart' as timeago;
import 'lat_lng.dart';
import 'place.dart';
import 'uploaded_file.dart';

String economia(
  String rota,
  String rota4,
) {
  if (rota4 ==
      "Unable to identify a mutually beneficial cost-effective route.") {
    return rota4;
  }
  List<String> rotalist = rota.split(",");
  List<String> rota4list = rota4.split(",");
  double gastojunto = (rota4list.length - 1) / 2;
  int gastosolo = rotalist.length - 1;
  int eco = 100 - (((gastojunto / gastosolo) * 100).round());

  return "Using UberShare you save " + eco.toString() + "% on every trip";
}

String tempo(
  String rota,
  String rota4,
  bool fulltext,
) {
  if (rota4 ==
      "Unable to identify a mutually beneficial cost-effective route.") {
    return rota4;
  }
  List<String> rotalist = rota.split(",");
  List<String> rota4list = rota4.split(",");
  int temposolo = rotalist.length - 1;

  String origem = rotalist[0];
  String destino = rotalist[rotalist.length - 1];

  int iorigem = rota4list.indexOf(origem);
  int idestino = rota4list.indexOf(destino);

  int tempojunto = idestino - iorigem;

  int aumentotempo = (tempojunto - temposolo) * 10;
  if (fulltext) {
    return "It will take " +
        aumentotempo.toString() +
        " more minutes to get to your destination";
  } else {
    return aumentotempo.toString();
  }
}

String? economiamensal(
  String rota,
  String rota4,
) {
  if (rota4 ==
      "Unable to identify a mutually beneficial cost-effective route.") {
    return rota4;
  }
  List<String> rotalist = rota.split(",");
  List<String> rota4list = rota4.split(",");
  double gastojunto = (rota4list.length - 1) / 2;
  int gastosolo = rotalist.length - 1;
  double ecomensal = (gastosolo - gastojunto) * 5 * 30;
  return "After 30 days using Uber Share, you will have saved " +
      ecomensal.toString() +
      " dollars";
}
Future<String> rota4pontos(
  String origem1,
  String origem2,
  String destino1,
  String destino2,
) async {
  String criarRota(String origem, String destino) {
    List<String> rota = [origem];
    List<String> origemParts = origem.split(".");
    List<String> destinoParts = destino.split(".");

    int origem0 = int.parse(origemParts[0]);
    int origem1 = int.parse(origemParts[1]);
    int destino0 = int.parse(destinoParts[0]);
    int destino1 = int.parse(destinoParts[1]);

    while (origem0 != destino0) {
      if (origem0 > destino0) {
        origem0 = origem0 - 1;
      } else if (origem0 < destino0) {
        origem0 = origem0 + 1;
      }
      String ponto = '$origem0.$origem1';
      rota.add(ponto);
    }

    while (origem1 != destino1) {
      if (origem1 > destino1) {
        origem1 = origem1 - 1;
      } else if (origem1 < destino1) {
        origem1 = origem1 + 1;
      }
      String ponto = '$origem0.$origem1';
      rota.add(ponto);
    }

    String rotaStr = rota.join(",");
    return rotaStr;
  }

  int distancia(String local1, String local2) {
    List<String> local1Parts = local1.split(".");
    List<String> local2Parts = local2.split(".");

    int dist = (int.parse(local1Parts[0]) - int.parse(local2Parts[0])).abs() +
        (int.parse(local1Parts[1]) - int.parse(local2Parts[1])).abs();

    return dist;
  }

  int i = 0;
  double dp = double.infinity;
  int id = 0;
  int dt = 0;

  while (i < 4) {
    if (i == 0) {
      dt = distancia(origem1, destino1);
    } else if (i == 1) {
      dt = distancia(origem1, destino2);
    } else if (i == 2) {
      dt = distancia(origem2, destino1);
    } else if (i == 3) {
      dt = distancia(origem2, destino2);
    }
    if (dt < dp) {
      dp = dt.toDouble();
      id = i;
    }
    i = i + 1;
  }

  List<String> rota = [];
  if (id == 0) {
    rota = criarRota(origem2, origem1).split(",");
    rota.removeLast();
    rota.addAll(criarRota(origem1, destino1).split(","));
    rota.removeLast();
    rota.addAll(criarRota(destino1, destino2).split(","));
  } else if (id == 1) {
    rota = criarRota(origem2, origem1).split(",");
    rota.removeLast();
    rota.addAll(criarRota(origem1, destino2).split(","));
    rota.removeLast();
    rota.addAll(criarRota(destino2, destino1).split(","));
  } else if (id == 2) {
    rota = criarRota(origem1, origem2).split(",");
    rota.removeLast();
    rota.addAll(criarRota(origem2, destino1).split(","));
    rota.removeLast();
    rota.addAll(criarRota(destino1, destino2).split(","));
  } else if (id == 3) {
    rota = criarRota(origem1, origem2).split(",");
    rota.removeLast();
    rota.addAll(criarRota(origem2, destino2).split(","));
    rota.removeLast();
    rota.addAll(criarRota(destino2, destino1).split(","));
  }

  return rota.join(",");
}
